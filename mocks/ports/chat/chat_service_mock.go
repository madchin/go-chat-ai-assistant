// Code generated by MockGen. DO NOT EDIT.
// Source: ./ports/services.go
//
// Generated by this command:
//
//	mockgen -source ./ports/services.go -destination ./mocks/ports/chat/chat_service_mock.go -exclude_interfaces HistoryService -package mock_chat_service
//

// Package mock_chat_service is a generated GoMock package.
package mock_chat_service

import (
	reflect "reflect"

	chat "github.com/madchin/go-chat-ai-assistant/domain/chat"
	gomock "go.uber.org/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockChatService) CreateChat(chatId, context string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", chatId, context)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatServiceMockRecorder) CreateChat(chatId, context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatService)(nil).CreateChat), chatId, context)
}

// SendMessage mocks base method.
func (m *MockChatService) SendMessage(chatId string, customerMsg chat.Message) (chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", chatId, customerMsg)
	ret0, _ := ret[0].(chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockChatServiceMockRecorder) SendMessage(chatId, customerMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockChatService)(nil).SendMessage), chatId, customerMsg)
}

// SendMessageStream mocks base method.
func (m *MockChatService) SendMessageStream(responseCh chan<- string, chatId string, customerMsg chat.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageStream", responseCh, chatId, customerMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageStream indicates an expected call of SendMessageStream.
func (mr *MockChatServiceMockRecorder) SendMessageStream(responseCh, chatId, customerMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageStream", reflect.TypeOf((*MockChatService)(nil).SendMessageStream), responseCh, chatId, customerMsg)
}
