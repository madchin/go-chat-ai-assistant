// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/chat_service.go
//
// Generated by this command:
//
//	mockgen -source ./services/chat_service.go -destination ./mocks/services/assistant_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	chat "github.com/madchin/go-chat-ai-assistant/domain/chat"
	gomock "go.uber.org/mock/gomock"
)

// MockassistantService is a mock of assistantService interface.
type MockassistantService struct {
	ctrl     *gomock.Controller
	recorder *MockassistantServiceMockRecorder
}

// MockassistantServiceMockRecorder is the mock recorder for MockassistantService.
type MockassistantServiceMockRecorder struct {
	mock *MockassistantService
}

// NewMockassistantService creates a new mock instance.
func NewMockassistantService(ctrl *gomock.Controller) *MockassistantService {
	mock := &MockassistantService{ctrl: ctrl}
	mock.recorder = &MockassistantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockassistantService) EXPECT() *MockassistantServiceMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockassistantService) SendMessage(content, chatId string) (chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", content, chatId)
	ret0, _ := ret[0].(chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockassistantServiceMockRecorder) SendMessage(content, chatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockassistantService)(nil).SendMessage), content, chatId)
}

// SendMessageStream mocks base method.
func (m *MockassistantService) SendMessageStream(response chan<- string, content, chatId string) (chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageStream", response, content, chatId)
	ret0, _ := ret[0].(chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageStream indicates an expected call of SendMessageStream.
func (mr *MockassistantServiceMockRecorder) SendMessageStream(response, content, chatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageStream", reflect.TypeOf((*MockassistantService)(nil).SendMessageStream), response, content, chatId)
}
